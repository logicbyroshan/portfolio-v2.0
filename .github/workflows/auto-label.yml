name: 🏷️ Auto Label Issues & PRs

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

jobs:
  # ======================= HACKTOBERFEST LABELING =======================
  hacktoberfest-label:
    name: 🎃 Hacktoberfest Labeling
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    
    steps:
    - name: 🎃 Add Hacktoberfest Label
      uses: actions/github-script@v7
      with:
        script: |
          const currentDate = new Date();
          const isOctober = currentDate.getMonth() === 9; // October is month 9 (0-indexed)
          
          if (isOctober) {
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const hasHacktoberfestLabel = labels.some(label => label.name === 'hacktoberfest');
            
            if (!hasHacktoberfestLabel) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['hacktoberfest']
              });
              
              console.log('🎃 Added Hacktoberfest label!');
            }
          }

  # ======================= AUTO LABELING BY CONTENT =======================
  auto-label:
    name: 🏷️ Auto Label by Content
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    
    steps:
    - name: 🏷️ Label Based on Content
      uses: actions/github-script@v7
      with:
        script: |
          const title = context.payload.issue?.title || context.payload.pull_request?.title || '';
          const body = context.payload.issue?.body || context.payload.pull_request?.body || '';
          const content = (title + ' ' + body).toLowerCase();
          
          const labels = [];
          
          // Frontend related
          if (content.match(/(html|css|javascript|js|frontend|ui|ux|design|template|styling)/i)) {
            labels.push('frontend');
          }
          
          // Backend related
          if (content.match(/(django|python|backend|api|database|model|view|url)/i)) {
            labels.push('backend');
          }
          
          // Bug related
          if (content.match(/(bug|error|issue|problem|fix|broken|crash)/i)) {
            labels.push('bug');
          }
          
          // Enhancement/Feature
          if (content.match(/(feature|enhancement|improve|add|new|implement)/i)) {
            labels.push('enhancement');
          }
          
          // Documentation
          if (content.match(/(documentation|docs|readme|comment|guide|tutorial)/i)) {
            labels.push('documentation');
          }
          
          // Testing
          if (content.match(/(test|testing|pytest|unittest|coverage)/i)) {
            labels.push('testing');
          }
          
          // Security
          if (content.match(/(security|vulnerability|auth|permission|csrf|xss)/i)) {
            labels.push('security');
          }
          
          // Performance
          if (content.match(/(performance|speed|slow|optimize|cache)/i)) {
            labels.push('performance');
          }
          
          // Database
          if (content.match(/(database|db|sql|migration|postgres|mysql)/i)) {
            labels.push('database');
          }
          
          // Good first issue (for beginners)
          if (content.match(/(beginner|easy|simple|first.*issue|good.*first)/i)) {
            labels.push('good first issue');
          }
          
          // Help wanted
          if (content.match(/(help.*wanted|need.*help|assistance|guidance)/i)) {
            labels.push('help wanted');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
            
            console.log(`🏷️ Added labels: ${labels.join(', ')}`);
          }

  # ======================= SIZE LABELING FOR PRS =======================
  pr-size-label:
    name: 📏 PR Size Labeling
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📏 Calculate PR Size and Add Label
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          try {
            // Get the number of changed lines
            const diffOutput = execSync('git diff --numstat HEAD~1 HEAD', { encoding: 'utf8' });
            const lines = diffOutput.trim().split('\n');
            
            let totalChanges = 0;
            lines.forEach(line => {
              const parts = line.split('\t');
              if (parts.length >= 2) {
                const additions = parseInt(parts[0]) || 0;
                const deletions = parseInt(parts[1]) || 0;
                totalChanges += additions + deletions;
              }
            });
            
            let sizeLabel = '';
            if (totalChanges <= 10) {
              sizeLabel = 'size/XS';
            } else if (totalChanges <= 30) {
              sizeLabel = 'size/S';
            } else if (totalChanges <= 100) {
              sizeLabel = 'size/M';
            } else if (totalChanges <= 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });
            
            console.log(`📏 Added size label: ${sizeLabel} (${totalChanges} lines changed)`);
          } catch (error) {
            console.log('Could not calculate PR size:', error.message);
          }