# Generated by Django 5.2.5 on 2025-09-21 14:11

import django.db.models.deletion
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutMeConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_title', tinymce.models.HTMLField(default='A Bit More <span>About Me</span>')),
                ('intro_paragraph', models.TextField(default='This is my story, my journey, and what drives me.', max_length=500)),
                ('profile_image', models.ImageField(blank=True, help_text='Profile image for About Me page', null=True, upload_to='about/')),
                ('detailed_description', tinymce.models.HTMLField(default="<ul>\n            <li><strong>Mission:</strong> To build software that is not only functional but also intuitive and impactful.</li>\n            <li><strong>Interests:</strong> Beyond coding, I'm passionate about AI ethics, open-source contribution, and exploring the intersection of technology and art.</li>\n        </ul>", help_text='Detailed description with HTML support')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'About Me Configuration',
                'verbose_name_plural': 'About Me Configuration',
            },
        ),
        migrations.CreateModel(
            name='CodeTogetherConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_title', tinymce.models.HTMLField(default="Let's Build <span>Together</span>")),
                ('intro_paragraph', models.TextField(default="I'm always excited to collaborate on innovative projects. Here's a look at what I'm passionate about building.", max_length=500)),
                ('interests_content', tinymce.models.HTMLField(default='<ul>\n            <li><strong>AI-Powered Web Apps:</strong> Integrating ML models into practical, user-facing applications.</li>\n            <li><strong>Open-Source Tools:</strong> Creating libraries or utilities that can help other developers.</li>\n            <li><strong>Full-Stack Solutions:</strong> From database design to responsive frontends.</li>\n            <li><strong>API Development:</strong> Building robust and scalable RESTful APIs.</li>\n        </ul>', help_text='Content describing your collaboration interests with HTML support')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Code Together Configuration',
                'verbose_name_plural': 'Code Together Configuration',
            },
        ),
        migrations.CreateModel(
            name='CollaborationProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('github_id', models.CharField(blank=True, help_text='GitHub username (optional)', max_length=100)),
                ('linkedin_id', models.CharField(blank=True, help_text='LinkedIn profile URL or username (optional)', max_length=100)),
                ('proposal', tinymce.models.HTMLField(help_text='Detailed project proposal or collaboration idea')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewing', 'Under Review'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('submitted_date', models.DateTimeField(auto_now_add=True)),
                ('reviewed_date', models.DateTimeField(blank=True, null=True)),
                ('admin_notes', tinymce.models.HTMLField(blank=True, help_text='Internal notes for admin use')),
            ],
            options={
                'verbose_name': 'Collaboration Proposal',
                'verbose_name_plural': 'Collaboration Proposals',
                'ordering': ['-submitted_date'],
            },
        ),
        migrations.CreateModel(
            name='ContactSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('message', tinymce.models.HTMLField()),
                ('submitted_date', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Contact Submission',
                'ordering': ['-submitted_date'],
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('answer', tinymce.models.HTMLField()),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(editable=False, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Brief description of this resource category', max_length=200)),
                ('icon', models.CharField(default='fa-solid fa-folder', help_text="Font Awesome icon class (e.g., 'fa-solid fa-code')", max_length=50)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order for category filtering')),
            ],
            options={
                'verbose_name_plural': 'Resource Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ResourcesConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_title', tinymce.models.HTMLField(default='My Curated <span>Resources</span>')),
                ('intro_paragraph', models.TextField(default='A collection of valuable articles, tools, videos, and courses that have helped me in my development journey.', max_length=500)),
                ('resources_description', tinymce.models.HTMLField(blank=True, default='<p>These resources have been carefully curated based on my experience and their practical value in real-world development scenarios. \n        Each resource has been personally tested and found valuable for professional growth.</p>', help_text='Additional description content for the resources section')),
                ('resources_per_page', models.PositiveIntegerField(default=12, help_text='Number of resources to display per page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Resources Configuration',
                'verbose_name_plural': 'Resources Configuration',
            },
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview_image', models.ImageField(help_text='Upload a preview image of your resume (JPG/PNG recommended)', upload_to='resume/')),
                ('downloadable_file', models.FileField(help_text='Upload your resume PDF file', upload_to='resume/')),
                ('title', models.CharField(default='My Resume', max_length=200)),
                ('description', tinymce.models.HTMLField(blank=True, default='Download my latest resume to learn more about my experience and skills.')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('years_experience', models.CharField(blank=True, default='3+', max_length=10)),
                ('total_projects', models.CharField(blank=True, default='25+', max_length=10)),
                ('technologies_used', models.CharField(blank=True, default='15+', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='SiteConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hero_greeting', models.CharField(default="HIII, IT'S ME", max_length=100)),
                ('hero_name', models.CharField(default='Roshan Damor', max_length=100)),
                ('hero_tagline', models.CharField(default='I am a Web Developer', max_length=200)),
                ('hero_projects_stat', models.CharField(default='25+', max_length=10)),
                ('hero_internships_stat', models.CharField(default='3+', max_length=10)),
                ('hero_articles_stat', models.CharField(default='15+', max_length=10)),
                ('twitter_url', models.URLField(blank=True, default='https://x.com/logicbyroshan')),
                ('github_url', models.URLField(blank=True, default='https://github.com/logicbyroshan')),
                ('linkedin_url', models.URLField(blank=True, default='https://www.linkedin.com/in/logicbyroshan')),
                ('youtube_url', models.URLField(blank=True, default='https://www.youtube.com/channel/logicbyroshan')),
                ('instagram_url', models.URLField(blank=True, default='https://www.instagram.com/logicbyroshan')),
                ('facebook_url', models.URLField(blank=True, default='https://www.facebook.com/logicbyroshan')),
                ('email', models.EmailField(blank=True, default='contact@roshandamor.me', max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('location', models.CharField(blank=True, default='Bhopal, India', max_length=100)),
            ],
            options={
                'verbose_name': 'Site Configuration',
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='tech_icons/')),
            ],
            options={
                'verbose_name_plural': 'Technologies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(max_length=100)),
                ('author_role', models.CharField(help_text="e.g., 'Project Manager @ TechCorp'", max_length=200)),
                ('author_image', models.ImageField(blank=True, help_text="Author's profile picture (optional)", null=True, upload_to='testimonials/')),
                ('quote', models.TextField(help_text='The testimonial quote', max_length=500)),
                ('is_featured', models.BooleanField(default=True, help_text='Display this testimonial on the Code Together page')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
                'ordering': ['order', '-created_date'],
            },
        ),
        migrations.CreateModel(
            name='VideoResume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('youtube_embed_url', models.URLField(help_text='The full YouTube embed URL (e.g., https://www.youtube.com/embed/VIDEO_ID)')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(editable=False, max_length=100)),
                ('category_type', models.CharField(choices=[('PRO', 'Project'), ('BLG', 'Blog'), ('EXP', 'Experience'), ('SKL', 'Skill'), ('ACH', 'Achievement'), ('OTH', 'Other')], max_length=3)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
                'unique_together': {('name', 'category_type')},
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(editable=False, max_length=200, unique=True)),
                ('summary', tinymce.models.HTMLField(help_text='A short excerpt for the blog list page.')),
                ('content', tinymce.models.HTMLField()),
                ('cover_image', models.ImageField(upload_to='blog_covers/')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(limit_choices_to={'category_type': 'BLG'}, to='portfolio.category')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('issuing_organization', models.CharField(max_length=200)),
                ('summary', tinymce.models.HTMLField(help_text='A brief description of the achievement.')),
                ('date_issued', models.DateField()),
                ('credential_url', models.URLField(blank=True, help_text='Link to verify the credential, if available.', max_length=255, null=True)),
                ('image', models.ImageField(blank=True, help_text='Optional: A scan or image of the certificate/award.', null=True, upload_to='achievements/')),
                ('category', models.ForeignKey(limit_choices_to={'category_type': 'ACH'}, on_delete=django.db.models.deletion.CASCADE, to='portfolio.category')),
            ],
            options={
                'ordering': ['-date_issued'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(max_length=100)),
                ('body', tinymce.models.HTMLField()),
                ('likes', models.PositiveIntegerField(default=0)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('is_approved', models.BooleanField(default=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='portfolio.blog')),
            ],
            options={
                'ordering': ['created_date'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(editable=False, max_length=200, unique=True)),
                ('summary', tinymce.models.HTMLField(help_text='A short summary displayed on the project list page.')),
                ('content', tinymce.models.HTMLField(help_text='The main detailed content for the project detail page.')),
                ('cover_image', models.ImageField(upload_to='project_covers/')),
                ('github_url', models.URLField(blank=True, null=True)),
                ('live_url', models.URLField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(limit_choices_to={'category_type': 'PRO'}, to='portfolio.category')),
                ('technologies', models.ManyToManyField(related_name='projects', to='portfolio.technology')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(default='Anonymous', max_length=100)),
                ('body', tinymce.models.HTMLField()),
                ('likes', models.PositiveIntegerField(default=0)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('is_approved', models.BooleanField(default=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='portfolio.project')),
            ],
            options={
                'verbose_name': 'Project Comment',
                'verbose_name_plural': 'Project Comments',
                'ordering': ['created_date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='project_images/')),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='portfolio.project')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(editable=False, max_length=200, unique=True)),
                ('description', models.TextField(help_text='Brief description of the resource', max_length=300)),
                ('resource_type', models.CharField(choices=[('ART', 'Article'), ('VID', 'Video'), ('PDF', 'PDF Document'), ('TOL', 'Tool/Website'), ('CRS', 'Course'), ('BOK', 'Book'), ('TUT', 'Tutorial'), ('DOC', 'Documentation'), ('REP', 'Code Repository'), ('OTH', 'Other')], default='ART', max_length=3)),
                ('link', models.URLField(blank=True, help_text='External link to the resource', null=True)),
                ('file_upload', models.FileField(blank=True, help_text='Upload file for downloadable resources (PDFs, documents, etc.)', null=True, upload_to='resources/files/')),
                ('youtube_embed_id', models.CharField(blank=True, help_text="YouTube video ID for embedding (e.g., 'dQw4w9WgXcQ')", max_length=50)),
                ('vimeo_embed_id', models.CharField(blank=True, help_text='Vimeo video ID for embedding', max_length=50)),
                ('custom_embed_code', tinymce.models.HTMLField(blank=True, help_text='Custom embed code for other video platforms or widgets')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the resource', null=True, upload_to='resources/thumbnails/')),
                ('preview_image', models.ImageField(blank=True, help_text='Preview image for PDFs or other documents', null=True, upload_to='resources/previews/')),
                ('author', models.CharField(blank=True, help_text='Original author or creator of the resource', max_length=100)),
                ('publication_date', models.DateField(blank=True, help_text='When the resource was originally published', null=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Display this resource prominently')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this resource should be displayed')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within category')),
                ('personal_rating', models.PositiveIntegerField(choices=[(1, '1 Stars'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], default=5, help_text='Your personal rating of this resource (1-5 stars)')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(blank=True, related_name='resources', to='portfolio.resourcecategory')),
                ('technologies', models.ManyToManyField(blank=True, help_text='Related technologies or tech stack', related_name='resources', to='portfolio.technology')),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
                'ordering': ['order', '-created_date'],
            },
        ),
        migrations.CreateModel(
            name='ResourceView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_date', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='portfolio.resource')),
            ],
            options={
                'verbose_name': 'Resource View',
                'verbose_name_plural': 'Resource Views',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField(editable=False, max_length=100, unique=True)),
                ('icon', models.CharField(max_length=50)),
                ('summary', tinymce.models.HTMLField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('category', models.ForeignKey(limit_choices_to={'category_type': 'SKL'}, on_delete=django.db.models.deletion.CASCADE, to='portfolio.category')),
            ],
            options={
                'ordering': ['category', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SkillTechnologyDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('learning_journey', tinymce.models.HTMLField()),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portfolio.skill')),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portfolio.technology')),
            ],
            options={
                'unique_together': {('skill', 'technology')},
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='technologies',
            field=models.ManyToManyField(through='portfolio.SkillTechnologyDetail', to='portfolio.technology'),
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=200)),
                ('company_url', models.URLField(blank=True, null=True)),
                ('role', models.CharField(max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('summary', tinymce.models.HTMLField()),
                ('responsibilities', tinymce.models.HTMLField()),
                ('achievements', tinymce.models.HTMLField()),
                ('experience_type', models.ForeignKey(limit_choices_to={'category_type': 'EXP'}, on_delete=django.db.models.deletion.CASCADE, to='portfolio.category')),
                ('technologies', models.ManyToManyField(related_name='experiences', to='portfolio.technology')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_likes', to='portfolio.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment Like',
                'verbose_name_plural': 'Comment Likes',
                'unique_together': {('comment', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ProjectCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_likes', to='portfolio.projectcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project Comment Like',
                'verbose_name_plural': 'Project Comment Likes',
                'unique_together': {('comment', 'user')},
            },
        ),
    ]
