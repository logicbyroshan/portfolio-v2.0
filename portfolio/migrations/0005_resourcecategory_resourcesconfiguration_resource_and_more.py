# Generated by Django 5.2.5 on 2025-09-12 11:32

import django.db.models.deletion
import tinymce.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('portfolio', '0004_codetogetherconfiguration_collaborationproposal_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(editable=False, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Brief description of this resource category', max_length=200)),
                ('icon', models.CharField(default='fa-solid fa-folder', help_text="Font Awesome icon class (e.g., 'fa-solid fa-code')", max_length=50)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order for category filtering')),
            ],
            options={
                'verbose_name_plural': 'Resource Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ResourcesConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_title', tinymce.models.HTMLField(default='My Curated <span>Resources</span>')),
                ('intro_paragraph', models.TextField(default='A collection of valuable articles, tools, videos, and courses that have helped me in my development journey.', max_length=500)),
                ('resources_description', tinymce.models.HTMLField(blank=True, default='<p>These resources have been carefully curated based on my experience and their practical value in real-world development scenarios. \n        Each resource has been personally tested and found valuable for professional growth.</p>', help_text='Additional description content for the resources section')),
                ('resources_per_page', models.PositiveIntegerField(default=12, help_text='Number of resources to display per page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Resources Configuration',
                'verbose_name_plural': 'Resources Configuration',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(editable=False, max_length=200, unique=True)),
                ('description', models.TextField(help_text='Brief description of the resource', max_length=300)),
                ('resource_type', models.CharField(choices=[('ART', 'Article'), ('VID', 'Video'), ('PDF', 'PDF Document'), ('TOL', 'Tool/Website'), ('CRS', 'Course'), ('BOK', 'Book'), ('TUT', 'Tutorial'), ('DOC', 'Documentation'), ('REP', 'Code Repository'), ('OTH', 'Other')], default='ART', max_length=3)),
                ('link', models.URLField(blank=True, help_text='External link to the resource', null=True)),
                ('file_upload', models.FileField(blank=True, help_text='Upload file for downloadable resources (PDFs, documents, etc.)', null=True, upload_to='resources/files/')),
                ('youtube_embed_id', models.CharField(blank=True, help_text="YouTube video ID for embedding (e.g., 'dQw4w9WgXcQ')", max_length=50)),
                ('vimeo_embed_id', models.CharField(blank=True, help_text='Vimeo video ID for embedding', max_length=50)),
                ('custom_embed_code', tinymce.models.HTMLField(blank=True, help_text='Custom embed code for other video platforms or widgets')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the resource', null=True, upload_to='resources/thumbnails/')),
                ('preview_image', models.ImageField(blank=True, help_text='Preview image for PDFs or other documents', null=True, upload_to='resources/previews/')),
                ('author', models.CharField(blank=True, help_text='Original author or creator of the resource', max_length=100)),
                ('publication_date', models.DateField(blank=True, help_text='When the resource was originally published', null=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Display this resource prominently')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this resource should be displayed')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within category')),
                ('personal_rating', models.PositiveIntegerField(choices=[(1, '1 Stars'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], default=5, help_text='Your personal rating of this resource (1-5 stars)')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('technologies', models.ManyToManyField(blank=True, help_text='Related technologies or tech stack', related_name='resources', to='portfolio.technology')),
                ('categories', models.ManyToManyField(blank=True, related_name='resources', to='portfolio.resourcecategory')),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
                'ordering': ['order', '-created_date'],
            },
        ),
        migrations.CreateModel(
            name='ResourceView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_date', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='portfolio.resource')),
            ],
            options={
                'verbose_name': 'Resource View',
                'verbose_name_plural': 'Resource Views',
            },
        ),
    ]
